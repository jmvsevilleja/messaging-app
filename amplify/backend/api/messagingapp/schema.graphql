input AMPLIFY {
    globalAuthRule: AuthRule = { allow: public }
}
enum MessageStatus {
    SENT
    DELIVERED
    READ
}

type Message @model @auth(rules: [{ allow: public }]) {
    id: ID!
    content: String
    user: User @belongsTo
    chatRoom: ChatRoom @belongsTo
    image: String
    audio: String
    status: MessageStatus
    replyToMessageID: ID
    forUserId: ID
}

type ChatRoom @model @auth(rules: [{ allow: public }]) {
    id: ID!
    newMessages: Int
    lastMessage: Message
    messages: [Message] @hasMany
    chatRoomUsers: [ChatRoomUser] @hasMany
    admin: User! @hasOne
    name: String
    imageUri: String
}

type User @model @auth(rules: [{ allow: public }]) {
    id: ID!
    clinicaID: String!
        @index(
            name: "byUserClinicaID"
            queryField: "userByClinicaID"
            sortKeyFields: ["id"]
        )
    name: String!
        @index(
            name: "byUserName"
            queryField: "userByName"
            sortKeyFields: ["id"]
        )
    imageUri: String
    status: String
    message: [Message] @hasMany
    chatRoomUser: ChatRoomUser @hasOne
    chatRoom: ChatRoom @belongsTo
    lastOnlineAt: AWSTimestamp
    online: Boolean
    publicKey: String
}

type ChatRoomUser @model(queries: null) @auth(rules: [{ allow: public }]) {
    id: ID!
    chatroom: ChatRoom! @belongsTo
    user: User! @belongsTo
}

type Subscription {
    onCreateMessageByChatRoomMessagesId(chatRoomMessagesId: ID): Message
        @aws_subscribe(mutations: ["createMessage"])

    onUpdateMessageByChatRoomMessagesId(chatRoomMessagesId: ID): Message
        @aws_subscribe(mutations: ["updateMessage"])

    onCreateChatRoomUserByChatRoomUserUserId(
        chatRoomUserUserId: ID
    ): ChatRoomUser @aws_subscribe(mutations: ["createChatRoomUser"])
}
